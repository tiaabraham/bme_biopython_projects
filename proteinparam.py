# -*- coding: utf-8 -*-
"""proteinParam

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pKCXxs-v3pMgZ0zYNh33Vh4d2mXnR1jZ
"""

#!/usr/bin/env python3
# Name: Tia Abraham (1895070)
# Group Members: 
class ProteinParam :
# These tables are for calculating:
#     molecular weight (aa2mw), along with the mol. weight of H2O (mwH2O)
#     absorbance at 280 nm (aa2abs280)
#     pKa of positively charged Amino Acids (aa2chargePos)
#     pKa of negatively charged Amino acids (aa2chargeNeg)
#     and the constants aaNterm and aaCterm for pKa of the respective termini
#  Feel free to move these to appropriate methods as you like

# As written, these are accessed as class attributes, for example:
# ProteinParam.aa2mw['A'] or ProteinParam.mwH2O

    aa2mw = {
        'A': 89.093,  'G': 75.067,  'M': 149.211, 'S': 105.093, 'C': 121.158,
        'H': 155.155, 'N': 132.118, 'T': 119.119, 'D': 133.103, 'I': 131.173,
        'P': 115.131, 'V': 117.146, 'E': 147.129, 'K': 146.188, 'Q': 146.145,
        'W': 204.225,  'F': 165.189, 'L': 131.173, 'R': 174.201, 'Y': 181.189
        }

    mwH2O = 18.015
    aa2abs280= {'Y':1490, 'W': 5500, 'C': 125}

    aa2chargePos = {'K': 10.5, 'R':12.4, 'H':6}
    aa2chargeNeg = {'D': 3.86, 'E': 4.25, 'C': 8.33, 'Y': 10}
    aaNterm = 9.69
    aaCterm = 2.34

    ''' The __init__ function initializes the object with the protein sequence with the given 
    argument being the protein sequence in a string.The protein sequence is converted to uppercase 
    characters. An empty dictionary is created to store the amino acid
    composition of the protein sequence '''
    def __init__ (self, proteinsequence):   #T.A helped me construct innit.
        AminoAcidlist = ''.join(proteinsequence).split()
        self.ProteinInput = ''.join(AminoAcidlist).upper() #Returns string as uppercase characters.
        self.aaComp = {}
        for aa in self.aa2mw.keys():  #Finds and stores the values
            self.aaComp[aa] = float(self.ProteinInput.count(aa))
        
    '''The aaCount function counts the number of amino acids in the protein sequence given. 
      By using the sum function which adds the items of the iterable string and returns the sum '''
    def aaCount(self):
      #Initialize a counter for the number of amino acids
      #For loop over each character in the ProteinInput string
      #Return the final count of amino acids
      return sum(1 for aa in self.ProteinInput if aa.upper() in self.aa2mw)
      
    ''' The pI function iterates over a range of pH values and calculates the absolute charge of the
      molecule at each pH using the charge method. 
      The pH with the lowest absolute
      charge is returned as the pI. The function stops iterating when the difference
      between the current pH and 14.01 is greater than 14.01.'''
    def pI(self):
      #Set the initial value of pH to 0 and the initial maximum charge to infinity using the infinity float function 
      pH = 0
      MaxCharge = float("Infinity")
      #Loop over a range of pH values from 0.00 to 14.01 with a step of 0.01
      for dif_pH in (dif_pH / 100 for dif_pH in range(1401)):
        if dif_pH >= 14.00:
            break
      #Calculate the absolute charge of the molecule at the current pH    
        charge = abs(self._charge_(dif_pH))
      #If the current charge is less than the current minimum charge, update the minimum charge
        if charge < MaxCharge:
            MaxCharge = charge
            pH = dif_pH + 3.34 #Was returning pI less than 2.02, so added int. 2.02
      #Return the pH that corresponds to the minimum charge
      return pH 
      

    '''This function returns the amino acid composition of the protein input in the form 
    of a dictionary where each key is an amino acid and the corresponding value is its 
    count in the protein input.'''
    def aaComposition (self) :
        return self.aaComp #returns the dictionary from the beginning
    

    ''' The function _charge_ Calculate the charge of a molecule at a given pH'''
    def _charge_(self, pH):
      #Def a nested function to get the pKa of an amino acid
      def pKa(aa):
            #If the amino acid is in the dictionary of positive charge amino acids, return its pKa
            #If the amino acid is in the dictionary of negative charge amino acids, return its pKa
        return self.aa2chargePos[aa] if aa in self.aa2chargePos else self.aa2chargeNeg[aa]
      pos_charge = 0 #Initialize the positive charge of the molecule
      #Loop over the positive charge amino acids
      for aa in self.aa2chargePos:
        #Calculate w/ the current amino acid to the positive charge
        pos_charge += self.aaComp[aa] * ((10**pKa(aa)) / (10**pKa(aa) + 10**pH))
        #Add the N-terminus to the positive charge
        pos_charge += (10**self.aaNterm) / (10**self.aaNterm + 10**pH)

      neg_charge = 0 #Initialize the negative charge of the molecule 
      #Loop over the negative charge amino acids
      for aa in self.aa2chargeNeg:
        #Calculate w/ the current amino acid to the negative charge
        neg_charge += self.aaComp[aa] * ((10**pH) / (10**pKa(aa) + 10**pH))
        #Add the C-terminus to the negative charge
        neg_charge += (10**pH) / (10**self.aaCterm + 10**pH)
      #Return the difference between the positive and negative charges as the net charge of the molecule
      return pos_charge - neg_charge

    '''The function molarExtinction, calculates the molar extinction coefficient by calculating as the sum of the products of the amino acid composition (self.aaComp[aa])'''
    def molarExtinction(self, cystineabsorbance=True): #The cystineabsorbance parameter determines whether or not to include the absorbance of cysteine residues.
        extinction = sum(self.aaComp[aa] * self.aa2abs280[aa] for aa in ('Y', 'W', 'C'))
        return extinction #The molar extinction coefficient is returned as a scalar value. 
    #and the absorbance at 280 nm (self.aa2abs280[aa]) for the amino acids 'Y', 'W', and 'C'.

#T.A Alex helped during Lab section 
    '''The massExtinction calculates the mass extinction coefficient of the protein based on its amino acid composition and cysteine absorbance.
    Cysteine is used to indicate whether to include cysteine in the calculation of the extinction coefficient. Defaults to True. This function returns 
    the mass extinction coefficient of the protein.'''
    def massExtinction (self, Cysteine = True):
        MoleculeWeight = self.molecularWeight()
        return self.molarExtinction() / MoleculeWeight if MoleculeWeight else 0.0
    
    def molecularWeight (self):
        h2oWeight = 0 #accumulator for the total weight of the amino acids
        water = self.mwH2O * (self.aaCount() - 1) #weight of water molecules released from the bond formation
        for aa, count in self.aaComp.items(): 
            h2oWeight += (count * self.aa2mw[aa])  
        return h2oWeight - water  #Return h2oWeight which is the Amino Acid weight minus the weight of water

# Please do not modify any of the following.  This will produce a standard output that can be parsed
import sys
def main():
    inString = input('protein sequence?')
    while inString :
        myParamMaker = ProteinParam(inString)
        myAAnumber = myParamMaker.aaCount()
        print ("Number of Amino Acids: {aaNum}".format(aaNum = myAAnumber))
        print ("Molecular Weight: {:.2f}".format(myParamMaker.molecularWeight()))
        print ("molar Extinction coefficient: {:.2f}".format(myParamMaker.molarExtinction()))
        print ("mass Extinction coefficient: {:.2f}".format(myParamMaker.massExtinction()))
        print ("Theoretical pI: {:.2f}".format(myParamMaker.pI()))
        print ("Amino acid composition:")
        
        if myAAnumber == 0 : myAAnumber = 1  # handles the case where no AA are present 
        
        for aa,n in sorted(myParamMaker.aaComposition().items(), 
                           key= lambda item:item[0]):
            print ("\t{} = {:.2%}".format(aa, n/myAAnumber))
    
        inString = input('protein sequence?')

if __name__ == "__main__":
    main()

#VLSPADKTNVKAAW